From 3006e0bf5dcbc1cdd9577876e2a857d6036f170b Mon Sep 17 00:00:00 2001
From: GF <support@gfutures.net>
Date: Wed, 22 Mar 2017 14:12:46 +0100
Subject: [PATCH] v3d platform

---
 configure.ac                                | 78 ++++++++++++++++++++++++++---
 m4/xbmc_arch.m4                             |  4 ++
 project/cmake/scripts/linux/ArchSetup.cmake |  6 ++-
 tools/depends/configure.ac                  | 27 +++++++++
 tools/depends/target/ffmpeg/autobuild.sh    | 14 ++++++
 xbmc/addons/AddonManager.cpp                |  6 +++
 xbmc/platform/xbmc.cpp                      |  9 ++++
 xbmc/system_gl.h                            | 21 ++++----
 xbmc/windowing/egl/EGLWrapper.cpp           |  7 ++-
 xbmc/windowing/egl/Makefile.in              |  3 ++
 10 files changed, 157 insertions(+), 18 deletions(-)

diff --git a/configure.ac b/configure.ac
index 0609390..890d573 100644
--- a/configure.ac
+++ b/configure.ac
@@ -681,6 +681,27 @@ case $use_platform in
      use_neon=yes
      use_cpu=cortex-a7
      ;;
+  v3d-cortexa15)
+     target_platform=target_v3d
+     target_videoplatform=target_v3dnxpl
+     use_cpu="cortex-a15"
+     ;;
+  v3d-mipsel)
+     target_platform=target_v3d
+     target_videoplatform=target_v3dnxpl
+     use_neon=yes
+     use_gles=yes
+     use_gl=no
+     use_sdl=no
+     ;;
+  v3d-xcore-mipsel)
+     target_platform=target_v3d
+     target_videoplatform=target_v3dplatform
+     use_neon=yes
+     use_gles=yes
+     use_gl=no
+     use_sdl=no
+     ;;
 esac
 
 if test "$target_platform" = "target_raspberry_pi" ; then
@@ -696,6 +717,14 @@ if test "$target_platform" = "target_raspberry_pi" ; then
      CXXFLAGS="$CXXFLAGS"
 fi
 
+if test "$target_platform" = "target_v3d" ; then
+     use_openmax=no
+     CORE_SYSTEM_NAME=linux
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+     USE_V3D=1
+fi
+
 if test "$host_vendor" = "apple"; then
   use_avahi=no
   use_alsa=no
@@ -819,6 +848,15 @@ elif test "$use_arch" = "arm"; then
       [ CFLAGS="$SAVE_CFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         CXXFLAGS="$CXXFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         use_cpu=cortex-a8])
+  elif test "$use_cpu" = "cortex-a15"; then
+    # Compile for ARMv7ve architecture
+    SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="-mfpu=neon-vfpv4"
+    AC_COMPILE_IFELSE(
+      [AC_LANG_SOURCE([int foo;])],
+      [ CFLAGS="$SAVE_CFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad"
+        CXXFLAGS="$CXXFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mvectorize-with-neon-quad"
+        use_cpu=cortex-a15])
   else
     if test "$use_neon" = "yes"; then
       CFLAGS="$CFLAGS -mfpu=neon -mvectorize-with-neon-quad"
@@ -912,6 +950,9 @@ if test "x$have_builtin_sync_val_compare_and_swap" = "xyes"; then
         [Define to 1 if your compiler supports the __sync_val_compare_and_swap() intrinsic.])
 fi
 
+# check if libatomic is available
+AC_CHECK_LIB([atomic], [__atomic_add_fetch_8], [LIBS="$LIBS -latomic"],)
+
 # Check for u16string/u32string declarations
 AC_LANG_PUSH([C++])
 AC_CHECK_TYPES([std::u16string, std::u32string], [], [], [[#include <string>]])
@@ -944,16 +985,24 @@ if test "$use_gles" = "yes"; then
     AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
     AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
     AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
-  else
-    if test "$target_platform" = "target_raspberry_pi"; then
+  elif test "$target_platform" = "target_raspberry_pi"; then
       AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
       AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
       AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
       LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
-    else
+  elif test "$target_videoplatform" = "target_v3dplatform" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lv3dplatform"
+  elif test "$target_videoplatform" = "target_v3dnxpl" ; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lnxpl -lnexus"
+  else
       AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
       AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
-    fi
   fi
 else
   if test "$use_gl" = "yes"; then
@@ -1056,7 +1102,7 @@ int main() {
   )])
 AC_LANG_POP([C++])
 
-if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
+if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android" || test "${target_platform}" = "target_v3d"; then
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
 fi
 
@@ -1556,7 +1602,14 @@ if test "${USE_STATIC_FFMPEG}" = "1"; then
       pkg_cfg_prefix=${SYSROOT}
   fi
 
-  if test "$cross_compiling" != "yes"; then
+  if test "$target_platform" = "target_v3d"; then
+    AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+    AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+    ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS} ${PARALLEL_MAKE} --arch=generic
+    export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+
+  elif test "$cross_compiling" != "yes"; then
     if test "$use_debug" != "yes"; then
       FFMPEG_OPTS="-r"
     fi
@@ -1599,6 +1652,12 @@ if test "${USE_STATIC_FFMPEG}" = "1"; then
       CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
       export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
 
+    elif test "$with_ffmpeg" = "v3d"; then
+      # always build our ffmpeg
+      AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+        CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
+        export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+
     elif test "$with_ffmpeg" != "no"; then
       # user passed --with-ffmpeg=/some/path, lets use it
       AC_MSG_NOTICE("using ffmpeg: ${with_ffmpeg}")
@@ -1611,11 +1670,15 @@ if test "$FFMPEG_FOUND" != "true"; then
   PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
     [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"],
     [AC_MSG_ERROR("ffmpeg not found")])
+    if test "$with_ffmpeg" = "v3d"; then
+      FFMPEG_LIBS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --libs libavcodec 2>/dev/null)
+      FFMPEG_CFLAGS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --cflags libavcodec 2>/dev/null)
+    fi
 fi
 
 if test "${USE_STATIC_FFMPEG}" = "1"; then
   # get the libdir for static linking
-  FFMPEG_LIBDIR=${pkg_cfg_prefix}$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
+  FFMPEG_LIBDIR=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
   GNUTLS_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors gnutls)
 
   # check if static libs are available
@@ -2329,6 +2392,7 @@ AC_SUBST(HAVE_SSE4)
 AC_SUBST(USE_MMAL)
 AC_SUBST(USE_X11)
 AC_SUBST(USE_OPTICAL_DRIVE)
+AC_SUBST(USE_V3D)
 
 # pushd and popd are not available in other shells besides bash, so implement
 # our own pushd/popd functions
diff --git a/m4/xbmc_arch.m4 b/m4/xbmc_arch.m4
index d28f263..78bf56f 100644
--- a/m4/xbmc_arch.m4
+++ b/m4/xbmc_arch.m4
@@ -80,4 +80,12 @@ fi
 if test "$target_platform" = "target_raspberry_pi" ; then
   AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
 fi
+
+if test "$target_videoplatform" = "target_v3dplatform" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_V3DPLATFORM")
+fi
+
+if test "$target_videoplatform" = "target_v3dnxpl" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D -DTARGET_V3DNXPL")
+fi
 ])
diff --git a/project/cmake/scripts/linux/ArchSetup.cmake b/project/cmake/scripts/linux/ArchSetup.cmake
index c0cc1bf..716c08c 100644
--- a/project/cmake/scripts/linux/ArchSetup.cmake
+++ b/project/cmake/scripts/linux/ArchSetup.cmake
@@ -13,7 +13,11 @@ else()
     set(ARCH i486-linux)
     set(NEON False)
     add_options(CXX ALL_BUILDS "-msse")
-  elseif(CPU MATCHES arm)
+  elseif(CPU MATCHES cortex-a15)
+    set(ARCH arm)
+    set(NEON True)
+    set(NEON_FLAGS "-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4 -mvectorize-with-neon-quad")
+  elseif(CPU MATCHES arm )
     set(ARCH arm)
     set(NEON True)
     set(NEON_FLAGS "-mfpu=neon -mvectorize-with-neon-quad")
diff --git a/tools/depends/configure.ac b/tools/depends/configure.ac
index 3626ea5..6b2f5ff 100644
--- a/tools/depends/configure.ac
+++ b/tools/depends/configure.ac
@@ -408,6 +408,30 @@ case $use_platform in
      platform_cxxflags="-fPIC -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4"
      platform_ldflags="-lpthread"
      ;;
+  v3d-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
+  v3d-xcore-mipsel)
+    use_cpu=$host_cpu
+    use_toolchain="${use_toolchain:-/usr}"
+    platform_cflags="-Os -fPIC -DPIC"
+    platform_ldflags="-Wl,-rpath-link=$prefix/$deps_dir/lib"
+    platform_cxxflags="$platform_cflags"
+    platform_os="linux"
+  ;;
+  v3d-cortexa15)
+     target_platform=v3d
+     use_neon=yes
+     use_cpu=cortex-a15
+     platform_cflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_cxxflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_ldflags="-lpthread"
+     ;;
 esac
 
 if test "$target_platform" = "raspberry-pi" ; then
diff --git a/tools/depends/target/ffmpeg/autobuild.sh b/tools/depends/target/ffmpeg/autobuild.sh
index 5c29762..a3e7806 100755
--- a/tools/depends/target/ffmpeg/autobuild.sh
+++ b/tools/depends/target/ffmpeg/autobuild.sh
@@ -134,6 +134,20 @@ tar --strip-components=1 -xf $MYDIR/${ARCHIVE}
 
 CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
 ./configure --prefix=$FFMPEG_PREFIX \
+	--bindir="$FFMPEG_PREFIX/bin" \
+	--libdir="$FFMPEG_PREFIX/lib" \
+	--incdir="$FFMPEG_PREFIX/include" \
+	--pkgconfigdir="$FFMPEG_PREFIX/lib/pkgconfig" \
+	--target-os=linux \
+	--enable-cross-compile \
+	--nm="$NM" \
+	--ar="$AR" \
+	--as="$AS" \
+	--strip="$STRIP" \
+	--cc="$CC" \
+	--cxx="$CXX" \
+	--ld="$CCLD" \
+	--ranlib="$RANLIB" \
 	--extra-version="kodi-${VERSION}" \
 	--disable-devices \
 	--disable-ffplay \
diff --git a/xbmc/addons/AddonManager.cpp b/xbmc/addons/AddonManager.cpp
index 6721f07..4bbab6d 100644
--- a/xbmc/addons/AddonManager.cpp
+++ b/xbmc/addons/AddonManager.cpp
@@ -936,6 +936,9 @@ bool CAddonMgr::PlatformSupportsAddon(const cp_plugin_info_t *plugin)
 #elif defined(TARGET_RASPBERRY_PI)
     "rbpi",
     "linux",
+#elif defined(TARGET_V3D)
+    "v3d",
+    "linux",
 #elif defined(TARGET_FREEBSD)
     "freebsd",
     "linux",
@@ -1028,6 +1031,9 @@ std::string CAddonMgr::GetPlatformLibraryName(cp_cfg_element_t *base) const
 #elif defined(TARGET_RASPBERRY_PI)
   libraryName = GetExtValue(base, "@library_rbpi");
   if (libraryName.empty())
+#elif defined(TARGET_V3D)
+  libraryName = GetExtValue(base, "@library_v3d");
+  if (libraryName.empty())
 #endif
   libraryName = GetExtValue(base, "@library_linux");
 #elif defined(TARGET_WINDOWS) && defined(HAS_DX)
diff --git a/xbmc/platform/xbmc.cpp b/xbmc/platform/xbmc.cpp
index 34e5ea6..7553a35 100644
--- a/xbmc/platform/xbmc.cpp
+++ b/xbmc/platform/xbmc.cpp
@@ -21,6 +21,11 @@
 #include "Application.h"
 #include "settings/AdvancedSettings.h"
 
+#ifdef TARGET_V3DPLATFORM
+#include <v3dplatform.h>
+  V3D_PlatformHandle g_v3dPlatformHandle;
+#endif
+
 #ifdef TARGET_RASPBERRY_PI
 #include "linux/RBP.h"
 #endif
@@ -113,6 +118,10 @@ extern "C" int XBMC_Run(bool renderGUI, CFileItemList &playlist)
   }
 #endif
 
+#ifdef TARGET_V3DPLATFORM
+  V3D_RegisterDisplayPlatform(&g_v3dPlatformHandle, NULL);
+#endif
+
 #ifdef TARGET_RASPBERRY_PI
   g_RBP.Deinitialize();
 #endif
diff --git a/xbmc/system_gl.h b/xbmc/system_gl.h
index 0eae1af..fb10660 100644
--- a/xbmc/system_gl.h
+++ b/xbmc/system_gl.h
@@ -22,7 +22,18 @@
 
 #include "system.h"
 
-#ifdef HAS_GL
+#ifdef HAS_GLES
+  #if defined(TARGET_DARWIN)
+    #include <OpenGLES/ES2/gl.h>
+    #include <OpenGLES/ES2/glext.h>
+  #elif defined(TARGET_V3DNXPL)
+    #include <GLES3/gl31.h>
+    #include <GLES2/gl2ext.h>
+  #else
+    #include <GLES2/gl2.h>
+    #include <GLES2/gl2ext.h>
+  #endif
+#elif HAS_GL
   // always define GL_GLEXT_PROTOTYPES before include gl headers
   #if !defined(GL_GLEXT_PROTOTYPES)
     #define GL_GLEXT_PROTOTYPES
@@ -41,12 +52,4 @@
     #include <OpenGL/glu.h>
     #include <OpenGL/glext.h>
   #endif
-#elif HAS_GLES == 2
-  #if defined(TARGET_DARWIN)
-    #include <OpenGLES/ES2/gl.h>
-    #include <OpenGLES/ES2/glext.h>
-  #else
-    #include <GLES2/gl2.h>
-    #include <GLES2/gl2ext.h>
-  #endif
 #endif
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 30f5757..6d215a9 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -35,7 +35,10 @@
   #include "EGLNativeTypeIMX.h"
 #endif
 #if defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
-#include "EGLNativeTypeAmlogic.h"
+  #include "EGLNativeTypeAmlogic.h"
+#endif
+#if defined(TARGET_V3D)
+  #include "EGLNativeTypeV3D.h"
 #endif
 #include "EGLWrapper.h"
 
@@ -101,6 +104,8 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation))
 #elif defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
+#elif defined(TARGET_V3D)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeV3D>(implementation))
 #endif
       )
   {
diff --git a/xbmc/windowing/egl/Makefile.in b/xbmc/windowing/egl/Makefile.in
index 68f7862..4eed1dc 100644
--- a/xbmc/windowing/egl/Makefile.in
+++ b/xbmc/windowing/egl/Makefile.in
@@ -12,6 +12,9 @@ endif
 ifeq (@USE_IMXVPU@,1)
 SRCS+= EGLNativeTypeIMX.cpp
 endif
+ifeq (@USE_V3D@,1)
+SRCS+= EGLNativeTypeV3D.cpp
+endif
 SRCS+= EGLWrapper.cpp
 
 LIB = windowing_egl.a
-- 
2.7.4